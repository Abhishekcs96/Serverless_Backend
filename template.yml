AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  My SAM App
  To provision and maintain my serverless backend

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  UpdateTablefnc: # name of function
    Type: AWS::Serverless::Function # Type of resource, lambda fnc here
    Properties: # properties of this lambda fnc
      CodeUri: Lambda/ # The folder inside the project where the function/app lives
      Handler: app.lambda_handler # format of filename.functionname (app.lambda_handler)
      Runtime: python3.9 # Runtime env to use
      Events: # Events that will trigger our lambda fnc
        Updatevisits: # Name of event, can be unique
          Type: Api # type of event (it means the api gateway in this case)
          Properties: # properties of the api gateway
            Path: /visits # the endpoint of the api gateway (like /prod/contact in our case)
            Method: get # method to use (get,put,post)
      Policies:
        - AmazonDynamoDBFullAccess

  EmailFormfnc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Node/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 30
      Environment:
        Variables:
         VERIFIED_EMAIL: abhishekcs96@gmail.com
      Events:
        Emailsend:
          Type: Api
          Properties:
            Path: /contact
            Method: post
      Policies:
        - Statement:
            - Sid: CloudwatchLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: "arn:aws:logs:ap-southeast-2:054336459332:*"
            - Sid: CloudWatchCreatePutPolicy
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:ap-southeast-2:054336459332:log-group:/aws/lambda/Mail_fwd:*"
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

  MyDynamoTable: # creating a dynamodb resource here with the name MYDDBtable
    Type: AWS::Serverless::SimpleTable # We could go with AWS::Dynamodb::Table or so, but this is the sam way, requires much lesser config than the cloudform way
    Properties:
      TableName: MyDynamodbTable # Name of DDB table
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: false
      Tags:
        Project: VisitCount

Outputs: # This will be printed to the console when the deployment finishes,
  UpdateVisitsAPI: # It will give us back this api endpoint url which we can use to interact with our fnc.
    Description: "API Gateway endpoint URL for Prod stage for Update Visits"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/visits/"
  EmailSendAPI:
    Description: "API Gateway endpoint URL for Prod stage for Email confirmations"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/contact/"

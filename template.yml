AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  My SAM App
  To provision and maintain my serverless backend

# Creatimg Resources.
# First are the S3 buckets. One for storing sam templates and packages and the other for backup website hosting.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3.achandrasekar.com
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - '*'
            MaxAge: '3600' 
      AccessControl: PublicRead
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: index.html
    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BackupBucket
                - /*
            Condition:
              StringEquals:
                aws:Referer: 'mN62kbnAl3rtY12!Opg2EDF#P9@'
      Bucket: !Ref BackupBucket

        
# Lambda functions here     
# One for sending emails, one for updating table data in dynamodb for visitor counts on website and another for testing the same.

  UpdateTablefnc: # name of function
    Type: AWS::Serverless::Function # Type of resource, lambda fnc here
    Properties: # properties of this lambda fnc
      CodeUri: Lambda/ # The folder inside the project where the function/app lives
      Handler: app.lambda_handler # format of filename.functionname (app.lambda_handler)
      Timeout: 30
      Runtime: python3.9 # Runtime env to use
      Events: # Events that will trigger our lambda fnc
        Updatevisits: # Name of event, can be unique
          Type: Api # type of event (it means the api gateway in this case)
          Properties: # properties of the api gateway
            Path: /visits # the endpoint of the api gateway (like /prod/contact in our case)
            Method: get # method to use (get,put,post)
      Policies:
        - AmazonDynamoDBFullAccess
  
  UpdateDemoTablefnc: 
    Type: AWS::Serverless::Function 
    Properties: 
      CodeUri: Lambda/ 
      Handler: demoapp.lambda_handler 
      Timeout: 30
      Runtime: python3.9
      Events: 
        Updatevisits: 
          Type: Api 
          Properties: 
            Path: /Stage/visits 
            Method: get 
      Policies:
        - AmazonDynamoDBFullAccess

  EmailFormfnc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Node/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 30
      Environment:
        Variables:
         VERIFIED_EMAIL: abhishekcs96@gmail.com
      Events:
        Emailsend:
          Type: Api
          Properties:
            Path: /contact
            Method: post
      Policies:
        - Statement:
            - Sid: CloudwatchLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: "arn:aws:logs:ap-southeast-2:054336459332:*"
            - Sid: CloudWatchCreatePutPolicy
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:ap-southeast-2:054336459332:log-group:/aws/lambda/Mail_fwd:*"
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

# Dynamodb table here
# Stores visitor count.

  MyDynamoTable: # creating a dynamodb resource here with the name MYDDBtable
    Type: AWS::Serverless::SimpleTable # We could go with AWS::Dynamodb::Table or so, but this is the sam way, requires much lesser config than the cloudform way
    Properties:
      TableName: MyDynamodbTable # Name of DDB table
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: false
      Tags:
        Project: VisitCount
  

# Demo Dynamodb table here
# This is for testing the visitor count functionality
  MyDemoDynamoTable: # creating a dynamodb resource here with the name MYDDBtable
    Type: AWS::Serverless::SimpleTable 
    Properties:
      TableName: MyDemoDynamodbTable 
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: false
      Tags:
        Project: DemoVisitCount



#Outputs to show as soon as deployment finishes successfully.

Outputs: # This will be printed to the console when the deployment finishes,
  UpdateVisitsAPI: # It will give us back this api endpoint url which we can use to interact with our fnc.
    Description: "API Gateway endpoint URL for Prod env for Update Visits"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/visits/"
  UpdateDemoVisitsAPI: 
    Description: "Demo API Gateway endpoint URL for Prod env (but stage)  for Update Visits"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/Stage/visits/"
  EmailSendAPI:
    Description: "API Gateway endpoint URL for Prod env for Email confirmations"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/contact/"
  WebsiteURL:
    Value: !GetAtt 
      - BackupBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - BackupBucket
          - DomainName
    Description: Name of S3 bucket to hold website content
